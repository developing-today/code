main
dynhost
**/dynhost
*.so
*.rh
**/*.so
**/*.rh
**/main
tags
.use_watchman
**/.use_watchman
*.qcow2
**/*.qcow2
buck-out
**/buck-out
node_modules
**/node_modules
out
**/out
result*
**/result*
target
**/target
targets
**/targets
.direnv
**/.direnv
**/dist
**/.tmp
*.kate-swp
**/*.kate-swp
.history
**/.history
*.exe
**/*.exe
*.iso
**/*.iso
badger/*
**/badger/
data/*
**/data/
__*__
sources/**/data
!sources/data
.ssh/*
**/.ssh/
.direnv
result*
*.qcow2
.nixie

# Local .terraform directories
**/.terraform/*

# .tfstate files
*.tfstate
*.tfstate.*
!*.tfstate.enc

# Crash log files
crash.log
crash.*.log

# Exclude all .tfvars files, which are likely to contain sensitive data, such as
# password, private keys, and other secrets. These should not be part of version
# control as they are data points which are potentially sensitive and subject
# to change depending on the environment.
*.tfvars
*.tfvars.json

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Ignore transient lock info files created by terraform apply
.terraform.tfstate.lock.info

# Include override files you do wish to add to version control using negated pattern
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc

*tfplan*
